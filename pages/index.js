import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import socket from "../services/socketio";
import { Status } from "player-mega-senha";
import styles from "../styles/Home.module.css";
import { usePlayer } from "../hooks/usePlayer";

export default function Home() {
  const { nickname, isLoggedIn } = usePlayer();
  const router = useRouter();
  const [players, setPlayers] = useState([]);
  const [word, setWord] = useState("");
  const [guess, setGuess] = useState("");
  const [hints, setHints] = useState([]);
  const [sendWordHint, setSendWordHint] = useState("");
  const [isHinting, setIsHinting] = useState(false);
  const [isGuessing, setIsGuessing] = useState(false);

  useEffect(() => {
    if (!isLoggedIn) {
      router.push("/login");
    }

    socket.on("allplayers", (data) => {
      setPlayers(data);

      if (data.length > 0) {
        let player = data.find((player) => player.id === socket.id);
        player?.status === Status.HINTING
          ? setIsHinting(true)
          : setIsHinting(false);
        player?.status === Status.GUESSING
          ? setIsGuessing(true)
          : setIsGuessing(false);
      }
    });

    socket.on("word", (data) => {
      setWord(data);
    });

    socket.on("allHints", (data) => {
      setHints(data);
    });
  }, [isLoggedIn, router]);

  function startGame() {
    setWord("");
    socket.emit("startGame");
  }

  function sendGuess() {
    socket.emit("guess", guess);
  }

  function sendHint() {
    socket.emit("hints", sendWordHint);
  }

  return (
    <>
      <h1>{nickname}</h1>
      <h1>{!isGuessing && word}</h1>
      {isGuessing && (
        <>
          <h3>Digite a palavra secreta</h3>
          <input value={guess} onChange={(e) => setGuess(e.target.value)} />

          <button onClick={() => sendGuess()}>Enviar a palavra secreta</button>
        </>
      )}

      {isHinting && (
        <>
          <h3>Digite at√© 3 dicas</h3>
          <input
            value={sendWordHint}
            onChange={(e) => setSendWordHint(e.target.value)}
          />

          <button onClick={() => sendHint()}>Enviar dica</button>
        </>
      )}

      <br></br>
      <br></br>
      <button onClick={() => startGame()}>Start Game</button>

      <div>
        {players &&
          players.map((data, index) => {
            return (
              <p
                key={index}
                className={
                  (data.status === Status.HINTING && styles.givingHints) ||
                  (data.status === Status.GUESSING && styles.guessing) ||
                  (data.status === Status.SPECTATING && styles.spectating)
                }
              >
                {data.nickname} -{" "}
                {(data.status === Status.HINTING && "Dando a dica") ||
                  (data.status === Status.GUESSING && "Descobrindo a palavra")}
              </p>
            );
          })}
      </div>

      <div style={{ overflowY: "scroll", height: 200, width: 300 }}>
        {hints &&
          hints.map((hint, index) => {
            return <p key={index}>{hint}</p>;
          })}
      </div>
    </>
  );

  // return (
  //   <div className={styles.container}>
  //     <Head>
  //       <title>Create Next App</title>
  //       <meta name="description" content="Generated by create next app" />
  //       <link rel="icon" href="/favicon.ico" />
  //     </Head>

  //     <main className={styles.main}>

  //       {isLoggedIn ? <MainGame nickname={nickname} /> : (
  //         <Login
  //           nickname={nickname}
  //           setNickname={setNickname}
  //           setIsLoggedIn={setIsLoggedIn}
  //         />
  //       )}
  //     </main>
  //   </div>
  // )
}
